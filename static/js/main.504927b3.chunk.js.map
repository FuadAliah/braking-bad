{"version":3,"sources":["assets/logo.png","assets/loading.gif","Components/Header.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Search","getQuery","useState","search","setSearch","type","placeholder","autoFocus","value","onChange","e","q","target","App","items","setItems","isLoading","setIsLoading","query","setQuery","useEffect","a","axios","result","data","fitchData","loading","map","item","key","char_id","img","name","nickname","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,6LCW5BC,MARf,WACE,OACE,gCACE,yBAAKC,UAAU,OAAOC,IAAKC,IAAMC,IAAI,WCkB5BC,EAtBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACHC,mBAAS,IADN,mBACxBC,EADwB,KAChBC,EADgB,KAQ/B,OACE,8BACE,2BACEC,KAAK,SACLT,UAAU,eACVU,YAAY,mBACZC,WAAS,EACTC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAbEC,EAacD,EAAEE,OAAOJ,MAZvCJ,EAAUO,QACVV,EAASU,GAFM,IAACA,O,kCCqDLE,EAnDH,WAAO,IAAD,EACUX,mBAAS,IADnB,mBACTY,EADS,KACFC,EADE,OAEkBb,oBAAS,GAF3B,mBAETc,EAFS,KAEEC,EAFF,OAGUf,mBAAS,IAHnB,mBAGTgB,EAHS,KAGFC,EAHE,KAoBhB,OAfAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKC,IAAM,sDAAD,OAAuDJ,IADjE,OACVK,EADU,OAEhBR,EAASQ,EAAOC,MAChBP,GAAa,GAHG,2CAAH,qDAMfQ,KACC,CAACP,IAQF,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQK,SAAU,SAAAU,GAAC,OAAIQ,EAASR,MAEhC,yBAAKf,UAAU,QAKboB,EAaA,yBAAKpB,UAAU,WACb,yBAAKC,IAAK6B,IAAS3B,IAAI,eAbzB,yBAAKH,UAAU,iBACZkB,EAAMa,KAAI,SAAAC,GAAI,OACb,yBAAKhC,UAAU,OAAOiC,IAAKD,EAAKE,SAC9B,yBAAKlC,UAAU,SAASC,IAAK+B,EAAKG,IAAKhC,IAAK6B,EAAKI,OACjD,yBAAKpC,UAAU,WACb,wBAAIA,UAAU,QAAQgC,EAAKI,MAC3B,wBAAIpC,UAAU,YAAYgC,EAAKK,kBChC3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.504927b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.10f5640d.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.c248cc5e.gif\";","import React from \"react\";\r\nimport logo from \"../assets/logo.png\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <img className=\"logo\" src={logo} alt=\"logo\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Search = ({ getQuery }) => {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const onChange = (q) => {\r\n    setSearch(q);\r\n    getQuery(q);\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"search\"\r\n        className=\"search_input\"\r\n        placeholder=\"Find Character..\"\r\n        autoFocus\r\n        value={search}\r\n        onChange={(e) => onChange(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Components/Header\";\nimport Search from \"./Components/Search\";\n// import { ByName, ByID } from \"./Components/Sort\";\nimport loading from \"./assets/loading.gif\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    const fitchData = async () => {\n      const result = await axios(`https://www.breakingbadapi.com/api/characters?name=${query}`);\n      setItems(result.data);\n      setIsLoading(false);\n    };\n\n    fitchData();\n  }, [query]);\n\n  // const nameSorted = () => {\n  //   setItems(items.sort((a, b) => (a.name > b.name ? 1 : -1)));\n  //   console.log(items);\n  // };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Search getQuery={q => setQuery(q)} />\n\n      <div className=\"row\">{/* <div className=\"filtered\">\n          <h5>Sorted By</h5>\n          <ByName name=\"Name\" nameSorted={nameSorted} />\n          <ByID id=\"Number\" />\n        </div> */}</div>\n      {!isLoading ? (\n        <div className=\"img_container\">\n          {items.map(item => (\n            <div className=\"item\" key={item.char_id}>\n              <img className=\"avatar\" src={item.img} alt={item.name} />\n              <div className=\"overlay\">\n                <h3 className=\"name\">{item.name}</h3>\n                <h4 className=\"nickname\">{item.nickname}</h4>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"loading\">\n          <img src={loading} alt=\"loading..\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}